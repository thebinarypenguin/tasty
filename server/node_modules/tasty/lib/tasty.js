var util = require('util');
var mongodb = require('mongodb');

var config = {
	host: "127.0.0.1",
	port: mongodb.Connection.DEFAULT_PORT,
	database: "tasty",
	serverOptions: {},
	databaseOptions: {}
};


var mongoServer = new mongodb.Server(config.host, config.port, config.serverOptions);
var mongoConnection = new mongodb.Db(config.database, mongoServer, config.databaseOptions);

// Get the objectID type - this is the default type of the "_id" field
var ObjectID = require('mongodb').ObjectID;


/**
 * Determine if element is in array
 */
var inArray = function (needle, haystack) {
	for (var i = 0; i < haystack.length; i++) {
		if (haystack[i] === needle) { return true; }
	}
    return false;
};


/**
 * Get documentation URL
 */
exports.getDocUrl = function (req, res) {
	res.send(200, {}, {message: "Documentation for this API can be found at XXXXXXXX.com"});
};


/**
 * Get all bookmarks
 */
exports.getAllBookmarks = function (req, res, params) {
	
	// Open connection
	mongoConnection.open(function (err, db) {
		
		// Get collection
		db.collection('bookmarks', function(err, collection) {

			// Get documents
			collection.find({}, {}, function (err, cursor) {
			
				cursor.toArray(function (err, docs) {
					res.send(200, {}, JSON.stringify(docs));
				});
			
			});

		});
		
	});
    
};


/**
 * Create new bookmark
 */
exports.createBookmark = function (req, res, data) {

	// Open connection
	mongoConnection.open(function (err, db) {
	
		// Get collection
		db.collection('bookmarks', function (err, collection) {			

			// Insert document			
			collection.insert(data, {safe: true}, function (err, docs) {
    			res.send(200, {}, {id: docs[0]._id });
			});

		});	
		
	});
	
};


/**
 * Get specified bookmark
 */
exports.getBookmark = function (req, res, id) {

	// Open connection
	mongoConnection.open(function (err, db) {
	
		// Get collection
		db.collection('bookmarks', function(err, collection) {
			
			// Get document			
			collection.findOne({"_id": new ObjectID(id)}, function(err, document) {
				res.send(200, {}, JSON.stringify(document));
			});

		});	
		
	});

};


/**
 * Update specified bookmark
 */
exports.updateBookmark = function (req, res, id, data) {

	// Open connection
	mongoConnection.open(function (err, db) {
	
		// Get collection
		db.collection('bookmarks', function(err, collection) {			

			// Get document			
			collection.update({"_id": new ObjectID(id)}, data, {safe: true}, function(err, count) {
    			res.send(200, {}, {});
			});

		});	
		
	});

};


/**
 * Delete specified bookmark
 */
exports.deleteBookmark = function (req, res, id) {

	// Open connection
	mongoConnection.open(function (err, db) {
	
		// Get collection
		db.collection('bookmarks', function(err, collection) {
			
			// Get document			
			collection.remove({"_id": new ObjectID(id)}, {safe: true}, function(err, count) {
				res.send(200, {}, {});
			});

		});	
		
	});

};

